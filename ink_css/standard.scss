// INK layout style sheet
// this is standard sheet
@import "./function.scss";
@import "./setting.scss";
@import "./icons_function.scss";

// - 읽기/쓰기 요령 및 규칙
// 변수와 요소 사용에 있어서 구분하기 위함이며,
// 퍼블리싱할 때에 CSS 문법과 유사하게 적용하여 빠른 습득 및 유추하여 작성 할 수 있도록 하기 위함.
//
// 변수의 스페이스는 '_' 언더바를 이용하고
// 요소의 스페이스는 '-' 하이픈을 이용.
//
// - 제공하는 모든 사항은 Class(클래스)로 정의되어 있으며, CSS의 속성값과 유사.
// Bootstrap(부트스트랩)과 Taillwind(테일윈드)와 유사한 프레임워크라고 생각하시면 빠른 적응에 기여.
//
// - 정의 규칙 및 사용 예제
// 보편적인 프레임워크의 간격 정의가 유사.
// p-10     = padding: 10px;
// pt-8     = padding-top: 8px;
// m-5      = margin: 5px;
// mb-12    = margin-bottom: 12px;
// r-12    = border-radius: 12px;
//
// 커스터마이징 및 상속, 편의를 고려한 정의.
// 속성값 : CSS 속성값 (ex : font-size, color, position ...)
// 적용값 : 속성값에 대한 적용치 (ex: block, 12, relative ...)적용값은 공백 및 하이픈 제외.
// 속성값-적용값 :
// w-4                   = width : 100 / 4 = 25% (width와 height는 100%/n 공식으로 정의)
// position-absolute     = position : absolute
// ellipsis              = overflow, text-overflow, white-space 통합 정의
// ellipsis-3            = 2줄 이상 옵션 제공
//
// 위와 같이 기본적으로 CSS 속성값과 적용값으로 정의되어 있으며,
// 특성에 따라 말줄임 및 명사로 정의되어 있음.
//
//
// - 사용 전, 주석을 확인하여 사용법 및 주의사항을 인지한 상태에서 사용하는 것을 권장.
//
// - 수정 시, 현 코드를 수정하기보다 별도의 스타일시트를 생성하여 재구성하는 것을 권장.
//
// - 초기화 설정값은 **으로 검색하여 빠른 찾기 가능.
// - 분류별, @@으로 검색하여 빠른 찾기 가능.





// **폰트 정의 (폰트명, 위치한 폴더명, 폰트파일명, 폰트 굵기, 폰트스타일-생략가능)
// G마켓 산스
// @include fontface('GmarketSans', 'GmarketSans', 'GmarketSansTTFLight', 300);
// @include fontface('GmarketSans', 'GmarketSans', 'GmarketSansTTFMedium', 400);
// @include fontface('GmarketSans', 'GmarketSans', 'GmarketSansTTFBold', 600);
// 노토산스 한국어
// @include fontface('NotoSansKR', 'NotoSansKR', 'NotoSansKR-Thin', 100);
// @include fontface('NotoSansKR', 'NotoSansKR', 'NotoSansKR-Light', 300);
// @include fontface('NotoSansKR', 'NotoSansKR', 'NotoSansKR-Regular', 400);
// @include fontface('NotoSansKR', 'NotoSansKR', 'NotoSansKR-Medium', 500);
// @include fontface('NotoSansKR', 'NotoSansKR', 'NotoSansKR-Bold', 700);
// @include fontface('NotoSansKR', 'NotoSansKR', 'NotoSansKR-Black', 900);
// 에스코어드림
// @include fontface('SCDream', 'S-Core_Dream', 'SCDream_Thin', 100);
// @include fontface('SCDream', 'S-Core_Dream', 'SCDream_Light', 300);
// @include fontface('SCDream', 'S-Core_Dream', 'SCDream_Regular', 400);
// @include fontface('SCDream', 'S-Core_Dream', 'SCDream_Medium', 500);
// @include fontface('SCDream', 'S-Core_Dream', 'SCDream_Bold', 700);
// @include fontface('SCDream', 'S-Core_Dream', 'SCDream_Black', 900);
// 로보토(영문)
@include fontface('Roboto', 'Roboto', 'Roboto-Thin', 100);
@include fontface('Roboto', 'Roboto', 'Roboto-Light', 300);
@include fontface('Roboto', 'Roboto', 'Roboto-Regular', 400);
@include fontface('Roboto', 'Roboto', 'Roboto-Medium', 500);
@include fontface('Roboto', 'Roboto', 'Roboto-Bold', 700);
@include fontface('Roboto', 'Roboto', 'Roboto-Black', 900);
// 나눔고딕
// @include fontface('NanumGothic', 'NanumGothic', 'NanumGothicLight', 300);
// @include fontface('NanumGothic', 'NanumGothic', 'NanumGothic', 400);
// @include fontface('NanumGothic', 'NanumGothic', 'NanumGothicBold', 700);
// // 나눔명조
// @include fontface('NanumMyeongjo', 'NanumMyeongjo', 'NanumMyeongjo', 400);
// @include fontface('NanumMyeongjo', 'NanumMyeongjo', 'NanumMyeongjoBold', 700);
// @include fontface('NanumMyeongjo', 'NanumMyeongjo', 'NanumMyeongjoExtraBold', 800);
// 넥슨 레벨1 고딕
// @include fontface('NEXON_Lv1_Gothic', 'NEXON_Lv1_Gothic', 'NEXON_Lv1_Gothic_Light', 300);
// @include fontface('NEXON_Lv1_Gothic', 'NEXON_Lv1_Gothic', 'NEXON_Lv1_Gothic', 400);
// @include fontface('NEXON_Lv1_Gothic', 'NEXON_Lv1_Gothic', 'NEXON_Lv1_Gothic_Bold', 700);
// 넥슨 레벨2 고딕
@include fontface('NEXON_Lv2_Gothic', 'NEXON_Lv2_Gothic', 'NEXON_Lv2_Gothic_Light', 300);
@include fontface('NEXON_Lv2_Gothic', 'NEXON_Lv2_Gothic', 'NEXON_Lv2_Gothic', 400);
@include fontface('NEXON_Lv2_Gothic', 'NEXON_Lv2_Gothic', 'NEXON_Lv2_Gothic_Medium', 500);
@include fontface('NEXON_Lv2_Gothic', 'NEXON_Lv2_Gothic', 'NEXON_Lv2_Gothic_Bold', 600);


// 폰트 적용
$font_family : 'NEXON_Lv2_Gothic', 'Roboto';

// @@기준 시작 ----------------------------
html {
  // 스크롤
  ::-webkit-scrollbar {width: 8px; height: 8px; padding: 4px 2px;}
  ::-webkit-scrollbar-thumb {width: 6px; height: 6px; background: $scroll_thumb; border-radius: 2px;}
  ::-webkit-scrollbar-track {width: 6px; height: 6px; background-color: $scroll_bg;}
   scroll-behavior: smooth;

  // 폰트 적용
  font-family: $font_family, sans-serif;
  background-color: $background_color;

  // 폰트 사이즈 변동 기준
  font-size: $font_size; // rem 단위의 계산 공식을 간단화하기 위한 기준
  @for $i from 0 through 3 {
    // 반응 단계 구하기
    $width : $max_width - ($i * 400);

    @if ($width >= 400){
      @include screen_width($width){
        font-size: $font_size - $i;
      }
    }
  }
}
button, input, select, textarea {
  font-family: $font_family;
  background-color: $background_color;
}

// 전체 폰트 기준
body {
  font-size: $font_size_body;
  color: $font_color_1;
}

p {font-size: 1.4rem;}
// 입력창 초기화
input, select, textarea {
  ::placeholder {color: $dis_color;}
}

// 기준 끝 ----------------------------

// 마우스 포인터
.pointer {cursor: pointer;}


// 코드 관련 시작 ----------------------------
.code_wrap {display: inline-block; width: 100%; height: auto; overflow-x: auto; margin: 12px auto;}
.code {display: inline-block; width: 100%; min-width: $md; height: auto; border: 1px solid #111; background-color: #333; color: #2583ff; text-align: left; padding: 12px 12px 12px 16px; position: relative; margin: 0 auto; overflow: hidden; font-size: 1.4rem; font-weight: normal;

  &:before, &:after {content: ''; display: block; width: 8px; height: 100%; background-color: #263d4a; position: absolute;}
  &:before {left: 0; top: 0;}
  &:after {width: 4px; right: 0; top: 0;}

  span {color: #bbbbbb;} // 속성
  p {display: inline; color: #e6dc00;} // 값
  .val {color: #e68900;}
  .func {color: #87d210;}
  .tit {color: #00abeb;}
  .ex {color: #29cd2b;}
  .cmt {color: #7e7e7e}
}
// 코드 관련 끝 -------------------------


// 예제 관련 시작 ----------------------------
.example_wrap {display: inline-block; width: 100%; height: auto; padding: $interval_3 + px; margin: 20px 0 20px; border: 1px solid $border_color; box-sizing: border-box; position: relative;

  &:before {content: 'Example'; display: block; font-weight: bold; color: $font_color_3; position: absolute; left: $interval_3 + px; top: -16px; text-shadow: 0 1px #fff, -4px 0 #fff, 4px 0 #fff}
}
// 예제 관련 끝 -------------------------


// @@콘텐츠 영역 관련 시작 -------------------------------

// 콘텐츠 영역
#content_wrap {width: 100%; max-width: $max_width; height: auto; min-height: 100vh; margin: 0 auto;
  &::after {content: ''; display: block; clear: both;}
  @include screen_width($max_width){
    @if ($interval_3) > 16 {
      padding: 16px;
    }@else {
      padding: $interval_3 + px;
    }
  }
}

// 콘텐츠 영역 구분
.cnt_wrap {display: inline-block; width: 100%; max-width: 100%; height: auto;
  &::after {content: ''; display: block; clear: both;}
}


// 콘텐츠 박스(콘텐츠 구분을 위한 영역 나눔에 도움) - 마진겹침현상(margin-collapsing)을 대응하기 위한 inline-block 채택(마진상쇄, BFC - Block Formatting Content)
.cnt_box {display: inline-block; width: 100%; max-width: $max_width; height: auto;
  &::after {content: ''; display: block; clear: both;}
}

// 헤드라인 초기화
@for $i from 1 through 6 {
  h#{$i} {
    $size : round($standard_size * 24 / $i);
    $size_result : ($size / 10);
    font-size: $size_result + rem;
  }
}

// 콘텐츠 영역 관련 끝 -------------------------------

table {
  caption {
    // 숨기기
    overflow: hidden;
    position: absolute; // BFC : relative / IFC : absolute
    display: inline-block; // IFC(inline formatting context) 문맥상의 문제 해결
    border: 0;
    // 요소크기의 0을 피하고 가장 근접하게 수렴한 1px
    // screen out 기법으로 인한 black hat을 피하기 위해 고안된 방법
    width: 1px;
    height: 1px;
    clip: rect(1px 1px 1px 1px); // IE6, IE7
    clip: rect(1px, 1px, 1px, 1px);
    clip-path: inset(50%);
    z-index: -1;
  }
  th, td {padding: $interval_3 + px;}
}

// 테이블 스크롤링
.table_over {display: block; width: 100%; height: auto; overflow-x: auto; position: relative;
  &::before,
  &::after {content: '테이블을 밀거나 스크롤을 이용하면 더 많은 정보를 확인할 수 있습니다.'; display: none; text-align: left; padding: 10px 0; color: $point_color; position: sticky; left: 0;}

  table {min-width: 1200px;}
  @include screen_width(1200px){
    &::before,
    &::after {display: block;}
  }
}

// 링크 메뉴 (스크롤 인터랙션)
.top_link_wrap {display: inline-block; width: 100%; height: auto; margin: 0 auto; padding: 0; text-align: center; position: sticky; top: 0; left: 0; z-index: 1000;
  .link_wrap {display: inline-block; width: 100%; height: auto;
    ul {display: inline-block; width: 100%; height: auto;
      li {display: inline-block;}
    }
    .linker {display: block; width: auto; height: auto; padding: $interval_2 + px; text-align: center; background-color: $main_color; color: #fff;}
  }
}








// @@버튼 관련 시작

.btn_wrap {display: block; width: 100%; height: auto; margin: 0 auto; padding: 0; text-align: center;
  &::after {content: ''; display: block; clear: both;}

  .btn {width: auto; height: 40px; margin: 0; margin-right: $interval_3 + px; margin-bottom: $interval_3 + px;
    &:last-child {margin-right: 0;}

    // @include screen_width($xl){
    //   width: calc(100% / 6 - #{$interval_3}px);
    //   &:nth-child(6n + 1) {margin-right: 0;}
    // }
    @include screen_width($lg){
      width: calc(100% / 4 - #{$interval_3}px);
      // &:nth-child(5n) {margin-right: $interval_3 + px;}
      &:nth-child(4n) {margin-right: 0;}
    }
    @include screen_width($md){
      width: calc(100% / 2 - #{$interval_3}px);
      &:nth-child(even) {margin-right: 0;}
    }
    @include screen_width($xs){
      width: 100%;
      margin-right: 0;
    }}

  &.inline {width: auto; text-align: center; margin: 0 auto;
    .btn {float: left;}
  }

  &.flex {flex-direction: row; flex-wrap: wrap; justify-content: flex-start;
    .btn {flex: 0 auto;}
  }
}

// 버튼 기본형
.btn {display: inline-block; height: auto; margin: 0 auto; margin-bottom: $interval_3 + px; font-size: 2rem; font-weight: bold; text-align: center; border: 1px solid transparent; background-color: $main_color; color: #fff; cursor: pointer; line-height: 1; transition: all 0.35s ease;
  @if ($interval_2 >= 10){
    padding: $interval_2 + px $interval_4 + px;
  }@else{
    padding: 10px $interval_4 + px;
  }
  @if ($standard_size * 10) > 50 {
    height: 50px;
  }@else {
    height: $standard_size * 10 + px;
  }

  &:hover {background-color: #fff; color: $main_color; border-color: $main_color;}
  &:focus {outline: 0; box-shadow: 0 10px 10px inherit;}

  &.reverce {background-color: transparent; color: $main_color; border-color: $main_color;
    &:hover {background-color: $main_color; color: #fff; border-color: transparent;}
  }

  &.inline {display: inline-block; width: auto;
    @include screen_width(600px){
      display: block; width: 100%;
    }
  }
  &.full {display: block; width: 100%;}

  &.delete {width: 40px; height: 40px;
    @include bg_icon(rgb(255, 255, 255), 'fail', 50%);
    &:hover {@include bg_icon(rgb(0, 0, 0), 'fail', 50%);}
  }
  &.add {width: 40px; height: 40px;
    @include bg_icon(rgb(255, 255, 255), 'plus', 50%);
    &:hover {@include bg_icon(rgb(0, 0, 0), 'plus', 50%);}
  }
  &.remove {width: 40px; height: 40px;
    @include bg_icon(rgb(255, 255, 255), 'minus', 50%);
    &:hover {@include bg_icon(rgb(0, 0, 0), 'minus', 50%);}
  }
  &.disabled,
  &button:disabled,
  &input:disabled {background-color: $dis_color; color: $font_color_2;}
}

// 버튼 관련 끝

// @@링크 관련 시작 ------------------
.link {color: inherit; font-size: inherit; font-weight: bold; position: relative;
  &:after {content: ''; display: block; width: 0; height: 1px; position: absolute; left: 0; bottom: 0; background-color: $main_color; transition: all 0.35s ease;}
  &:hover {color: $main_color;
    &:after {width: 100%;}
  }
}
// @@링크 관련 끝 ------------------

// @@이미지 관련 시작

// 이미지 최적화
img {width: auto; max-width: 100%; height: auto;}
// 이미지 박스 - 가상선택자를 사용하기 위함
.img_box{display: inline-block; width: auto; max-width: 100%; height: auto;
  &:before, &:after {content: '';}
}

// 이미지 관련 끝

// 입력폼 관련 시작
.input_box {display: inline-flex; width: auto; max-width: 100%; height: auto; overflow: hidden; font-size: $font_size_body; position: relative; float: left;
  &::after {content: ''; display: block; clear: both;}

  .tail {position: absolute; right: 0; top: 0; display: block; width: auto; height: inherit;
    &.delete {display: block; width: 40px; height: 40px;}
  }

  input, select {display: inline-block; width: 100%; height: auto; min-height: 40px; line-height: 40px; padding: 0 10px; @include prefix(appearance, none); font-size: $font_size_body;
    &::placeholder {color: $dis_color;}
  }
  textarea {display: inline-block; width: 100%; height: auto; line-height: 1.5; padding: 10px; @include prefix(appearance, none); font-size: $font_size_body;
  }
  select {@include bg_icon(rgba(0, 0, 0, 0.5), 'arrow_b', calc(100% - 8px));
    &::-ms-expand {display: none;}
    option {height: inherit;

    }
  }

  label {display: inline-block; width: auto; height: auto; max-width: 100%; cursor: pointer;

    &:before, &:after {content: ''; opacity: 0; background-color: #fff; transition: all 0.35s ease;}

    span {display: inline-block; font-size: $font_size_body; line-height: 20px; vertical-align: middle; color: $font_color_2; transition: all 0.35s ease;}

    .design {display: inline-block; width: auto; height: auto; background-color: transparent; position: relative; vertical-align: middle;
      &::before, &::after {content: ''; display: block; transition: all 0.35s ease;}
      .icon {width: 20px; height: 20px;}
    }

    .text {display: inline-block; font-size: $font_size_body; line-height: 20px; vertical-align: middle; color: $font_color_2;}
  }

  // 텍스트
  &.text {border: 1px solid $border_color;
    input {border: 0;
      + label {
        .design {
          &::after, &::before {display: none;}
        }
      }
    }
    select {border: 0;
      + label {
        .design {
          &::after, &::before {display: none;}

        }
      }
    }
    textarea {border: 0;
      + label {
        .design {
          &::after, &::before {display: none;}

        }
      }
    }
  }

  // 선택
  &.select {position: relative; border: 1px solid $border_color;
    select {padding-right: 40px; border: 0;
      @include bg_icon(rgba(0, 0, 0, 0.5), 'arrow_b', calc(100% - 8px));
      &.choose {color: $dis_color;
        option {color: $font_color_1;}
      }
      option {text-align: left;
        &:first-child {color: $dis_color;}
      }
    }
  }

  // 체크박스
  &.checkbox {
    input {display: block; width: 100%; height: 100%; min-height: 0; margin: 0; padding: 0; position: absolute; left: 0; top: 0; appearance: none; background-color: transparent; color: transparent; border: 0;
      + label {display: flex; align-items: center;
        .design {width: 20px; height: 20px; border: 1px solid $border_color; border-radius: 2px; margin-right: 8px;

          &::before, &::after {display: block; position: absolute; left: 50%; top: 50%; opacity: 0; background-color: #fff;}
          &::before {width: 2px; height: 6px; transform: translate(calc(-50% - 3px), calc(-50% + 2px)) rotate(-45deg);}
          &::after {width: 2px; height: 10px; transform: translate(calc(-50% + 2px), -50%) rotate(45deg);}

          .icon {width: 20px; height: 20px;}
        }
      }
      &:checked + label .design {background-color: $main_color;}
      &:checked + label .design::before,
      &:checked + label .design::after {opacity: 1;}
      &:checked + .text {color: $font_color_1;}
    }
  }

  // 라디오
  &.radio {
    input {display: block; width: 100%; height: 100%; min-height: 0; margin: 0; padding: 0; position: absolute; left: 0; top: 0; appearance: none; background-color: transparent; color: transparent; border: 0;
      + label {display: flex; align-items: center;
        .design {width: 20px; height: 20px; border: 1px solid $border_color; border-radius: 50%; margin-right: 8px;

          &::before {display: block; width: calc(100% - 4px); height: calc(100% - 4px); border-radius: 50%; position: absolute; left: 50%; top: 50%; opacity: 0; transform: translate(-50%, -50%); background-color: $main_color;}
          &::after {display: none;}
        }
      }
      &:checked + label .design::before {opacity: 1; background-color: $main_color;}
      &:checked + .text {color: $font_color_1;}
    }
  }

  // 파일
  &.file {display: flex; width: 100%; border: 1px solid $border_color;
    input {position: absolute; width: 0; height: 0; padding: 0; margin: -1px; overflow: hidden; clip:rect(0,0,0,0); border: 0;
      + label {width: 100%; min-width: 120px; max-width: 160px; background-color: $main_color;
        @if ($interval_2 >= 10) {
          padding: $interval_2 + px $interval_4 + px;
        } @else {
          padding: 10px $interval_4 + px;
        }
        .design {margin-right: 8px;
          &::after, &::before {display: none;}
        }
        .text {font-size: 2rem; line-height: 2rem; color: #fff;}

        @include screen_width(600px){
          max-width: 120px;
        }
      }

      &:checked + label .design::before {opacity: 1; background-color: $main_color;}
      &:checked + .text {color: $font_color_1;}
    }

    .file_wrap {display: inline-block; width: 100%; height: auto; line-height: 2rem;
      @if ($interval_2 >= 10) {
        padding: $interval_2 + px $interval_4 + px;
      } @else {
        padding: 10px $interval_4 + px;
      }
      .file_name, .file_count {display: block; width: auto; height: auto;  line-height: 2rem; color: $dis_color;}
      .file_name {float: left; width: 80%; padding-left: 26px;
        @include bg_icon(rgba(0, 0, 0, 0.5), 'file', 0);
      }
      .file_count {float: right; width: 20%; min-width: 50px; max-width: 120px; text-align: right;}

      @include screen_width(600px){
        .file_name {width: calc(100% - 50px);}
        .file_count {width: 50px; min-width: 0px; max-width: 100%;}
      }
    }
  }

  // 달력
  &.date {position: relative; border: 1px solid $border_color;
    input {padding-right: 40px; border: 0;
      @include bg_icon(rgba(0, 0, 0, 0.5), 'calendar', calc(100% - 8px));
    }
  }

  // 검색
  &.search {border: 1px solid $border_color;
    input {display: inline-block; width: calc(100% - 40px); height: 40px; border: 0;}
    button,
    button[type="submit"],
    button[type="image"] {display: inline-block; width: 40px; height: 40px; background-color: #fff;
      @include bg_icon(rgba(0, 0, 0, 0.5), 'search');
      &:focus, &:hover {@include bg_icon(rgba(0, 0, 0, 0.8), 'search');}
    }
  }



  @include screen_width(600px){
    display: block; width: 100%;
    &.checkbox, &.radio {display: inline-block; width: auto;}
  }
}


// 입력폼 관련 끝

// 설명(부가, 안내, 도움말)
.ex_text {
  display: block; width: 100%; height: auto; margin-top: 8px; padding: 0; float: left;
}



// @@목록(리스트) 관련 시작

// 리스트 정렬
// 순서 없는 목록
ul {
  &.left_list {
    li {display: inline-block; margin-left: $interval_2 + px;
      &:first-child {margin-left: 0;}
    }
  }
  &.count_list {
    counter-reset: ink_count_list 0;
    li {
      &:before {counter-increment: ink_count_list;
        content: counter(ink_count_list)'. '; display: inline;
      }
    }
  }
  &::after {content: ''; display: block; clear: both;}
  li {
    &::after {content: ''; display: block; clear: both;}
  }
}
// 순서 있는 목록
ol {padding-left: 24px; list-style: decimal;
  &::after {content: ''; display: block; clear: both;}
  li {
    &::after {content: ''; display: block; clear: both;}
  }
}
// 정의 목록
dl {display: block;
  &::after {content: ''; display: block; clear: both;}
  dt, dd {display: block;
    &::after {content: ''; display: block; clear: both;}
  }
}

// 목록(리스트) 관련 끝

// @@BLOCK IE 모달/팝업 관련 시작
.modal_wrap { display: none; width: 100%; height: 100vh; margin: 0; padding: 20px; font-size: 10px; position: fixed; left: 0; top: 0; box-sizing: border-box; z-index: 1000;
  &.on {display: block;}
  &.off {display: none;}
  &.test {display: block; position: relative;}
  &:before { content: ''; display: block; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); position: absolute; left: 0; top: 0; }

  .modal {display: block; width: 100%; max-width: 800px; height: auto; margin: 0; padding: 0; box-sizing: content-box; position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); transition: all 0.35s ease;
    @include screen_width(800px){
      width: calc(100% - 40px);
    }
    @include screen_width(400px){
      width: calc(100% - 20px);
    }

    .title_wrap { display: block; width: 100%; height: auto; margin: 0; padding: 0; position: relative;
      .tit { display: block; width: 100%; height: auto; margin: 0; padding: 14px 20px; color: #fff; background-color: $main_color; font-size: 1.8em; font-weight: bold; box-sizing: border-box; }
      .btn_close { display: block; width: 40px; height: 40px; margin: 0; padding: 0; position: absolute; right: 6px; top: 50%; transform: translate(0, -50%); background-color: transparent; outline: 0; border: 0; cursor: pointer;
        &:before, &:after { content: ''; display: block; width: 20px; height: 2px; background-color: #fff; position: absolute; left: 50%; top: 50%; }
        &:before { transform: translate(-50%, -50%) rotate(45deg); }
        &:after { transform: translate(-50%, -50%) rotate(-45deg); }
      }
    }
    .content_wrap {display: block; width: 100%; height: auto; min-height: 120px; max-height: calc(100vh - 200px); margin: 0; padding: 20px; box-sizing: border-box; background-color: #fff; font-size: 10px; border-bottom: 1px solid $border_color; overflow-y: auto;
      p {font-size: 1.6em;}
      .point {color: $point_color;}
      .btn_wrap {display: flex; float: none; margin: 20px auto;
        $interval_3_px: $interval_3 + px;
        .btn {display: inline-flex; width: calc(50% - (#{$interval_3_px} / 2)); font-size: 1.6em; line-height: 2em; padding: 0 10px;
          &:first-child {margin-left: 0;}
          @include screen_width(600px){
            margin-left: 0;
          }
        }
      }
      .img_box {display: inline-block; width: auto; height: auto; position: relative;}
      .cross {position: relative;
        &::before, &::after {content: ''; display: block; width: 110%; height: 6px; left: 50%; top: 50%; position: absolute; background-color: $point_color;}

        &::before {transform: translate(-50%, -50%) rotate(45deg);}
        &::after {transform: translate(-50%, -50%) rotate(-45deg);}
      }
    }
    .close_wrap {display: block; width: auto; height: auto; margin: 0; padding: 10px; font-size: 1em; background-color: #fff; position: relative; overflow: hidden;
      .input_box {margin: 0; padding: 0;
        &.check {min-height: 20px;}
        input {display: none;}
        label {display: block; width: 100%; font-size: 0.8em; margin: 0; padding: 0; cursor: pointer; float: none; color: $font_color_3;}
        .design {display: none;}
        .btn_close {width: 40px; height: 40px; position: absolute; right: 0; top: 50%; transform: translate(0, -50%); background-color: transparent; border: 0; outline: 0;
          &::before, &::after {content: ''; display: block; width: 2px; height: 16px; position: absolute; left: 50%; top: 50%; background-color: $main_color;}
          &::before {transform: translate(-50%, -50%) rotate(45deg);}
          &::after {transform: translate(-50%, -50%) rotate(-45deg);}
        }
      }
    }
  }

  &.block_ie {
    .ie_title_img {display: block; width: 100%; height: auto; line-height: 10px;
      .img_box {float: left; width: 120px; margin-bottom: $interval_3 + px; transition: all 0.35s ease;
        @include screen_width(500px){
          width: 100px;
        }
        @include screen_width(400px){
          width: 80px;
        }
      }
      p {display: block; float: left; width: calc(100% - 120px); height: 100%; padding: 0 10px 0 20px; box-sizing: border-box; font-size: 36px!important; font-weight: 900; line-height: 56px; color: #464646; transition: all 0.35s ease;
        @include screen_width(500px){
          font-size: 2.8em!important; line-height: 48px;
        }
        @include screen_width(400px){
          font-size: 2em!important; line-height: 36px;
        }
        @include screen_width(300px){
          font-size: 1.6em!important; line-height: 28px;
        }
      }
    }
    .btn_wrap {
      .btn {height: auto; max-height: 100%; line-height: 4em; vertical-align: middle; margin-left: $interval_3 + px; background-color: #fff; border: 2px solid $border_color; color: $main_color;
        @include screen_width(600px){
          display: block; width: 100%!important; margin-bottom: 10px;
        }
      }
      .btn:hover {border-color: $main_color;}
      .btn img {display: inline-block; width: 40px; height: auto; margin-right: 10px; vertical-align: middle;}
    }
  }
}

// @@BLOCK IE 모달/팝업 관련 끝

// 페이지네이션 관련 끝
.pagination {display: flex; width: 100%; height: auto; justify-content: space-between;
  ul {flex: 0 1 auto; display: flex; width: auto; height: auto; min-height: 40px; max-width: 100%; min-width: 0; margin: 0 auto; list-style: none; text-align: center;

    li {flex: 1; font-size: 1.6rem; display: inline-block; width: auto; height: auto;

      a {display: block; width: 100%; min-width: 40px; height: auto; min-height: 40px; line-height: 40px; font-size: 1.6rem; color: $font_color_2;}
      &.current {
        a {color: $font_color_1; font-weight: bold;}
      }
    }
  }
  &.center { justify-content: center;
    ul {margin: 0;}
  }

  button, a {flex: 0 1 auto; display: block; width: 40px; height: 40px; line-height: 40px; text-align: center; background-color: transparent;

    &.first {
      @include bg_icon(rgba(50, 50, 50, 0.8), 'arrow_double_l', 50%);
      &.lock {@include bg_icon(rgba(50, 50, 50, 0.4), 'arrow_double_l', 50%);}
    }
    &.last {
      @include bg_icon(rgba(50, 50, 50, 0.8), 'arrow_double_r', 50%);
      &.lock {@include bg_icon(rgba(50, 50, 50, 0.4), 'arrow_double_r', 50%);}
    }
    &.prev {position: relative;
      @include bg_icon(rgba(50, 50, 50, 0.8), 'arrow_l', 50%);
      &.lock {@include bg_icon(rgba(50, 50, 50, 0.4), 'arrow_l', 50%);}
      // &:before, &:after { content: ''; display: none; width: 12px; height: 1px; background-color: $main_color; position: absolute; }
      // &:before { left: 50%; top: calc(50% - 4px); transform: translate(-50%, -50%) rotate(-45deg); }
      // &:after { left: 50%; top: calc(50% + 4px); transform: translate(-50%, -50%) rotate(45deg); }
    }
    &.next {position: relative;
      @include bg_icon(rgba(50, 50, 50, 0.8), 'arrow_r', 50%);
      &.lock {@include bg_icon(rgba(50, 50, 50, 0.4), 'arrow_r', 50%);}
      // &:before, &:after { content: ''; display: none; width: 12px; height: 1px; background-color: $main_color; position: absolute; }
      // &:before { left: 50%; top: calc(50% - 4px); transform: translate(-50%, -50%) rotate(45deg); }
      // &:after { left: 50%; top: calc(50% + 4px); transform: translate(-50%, -50%) rotate(-45deg); }
    }
  }
}

// 페이지네이션 관련 끝

// 헤더 관련 시작
#header_wrap {display: inline-block; width: 100%; max-width: $max_width; height: auto; position: sticky; left: 0; top: 0; z-index: 9000; background-color: #fff; box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);

  &.test {position: relative; left: auto; top: auto; z-index: 0;}

  .header_wrap {display: inline-block; width: 100%; height: auto; position: relative;

    .logo {display: inline-block; width: auto; height: auto; position: absolute; left: $interval_4 + px; top: 50%; transform: translate(0,-50%); font-size: 2rem; font-weight: bold;

      a {display: inline-block; width: auto; height: auto;
        img {width: auto; max-width: 260px; height: auto; object-fit: contain;}
      }
    }

    .gnb_wrap {display: inline-block; width: 100%; height: auto; text-align: center;
      ul {display: flex; justify-content: center; text-align: center; margin: 0; padding: 0;
        li {display: inline-block; width: auto; height: auto; position: relative;
          a {display: block; width: auto; height: auto; line-height: 1; padding: $interval_4 + px; font-size: 1.6rem; font-weight: bold;}
        }
      }
    }

    .lnb_wrap {display: none; width: 100%; min-width: 120px; height: auto; text-align: center; position:absolute; left: 0; top: 100%; background-color: #fff; box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);

      ul {display: flex; justify-content: flex-start; flex-direction: column; text-align: center; margin: 0; padding: 0;
        li {display: inline-block; width: auto; height: auto;
          a {display: block; width: auto; height: auto; line-height: 1; padding: $interval_2 + px $interval_4 + px; font-size: 1.6rem; font-weight: 400;}
        }
      }
      &.type_1 {width: auto; position: absolute; left: 50%; top: 100%; transform:translate(-50%, 0);
        ul {display: flex; justify-content: flex-start; flex-direction: row; text-align: center; margin: 0; padding: 0;
          li {display: inline-block; width: auto; height: auto;
            a {display: block; width: auto; height: auto; line-height: 1; padding: $interval_2 + px $interval_4 + px; font-size: 1.6rem; font-weight: 400;}
          }
        }
      }
      &.type_2 {width: auto; position: absolute; left: 50%; top: 100%; transform:translate(-50%, 0);
        ul {display: flex; justify-content: flex-start; flex-direction: row; text-align: center; margin: 0; padding: 0;
          li {display: inline-block; width: auto; height: auto;
            a {display: block; width: auto; height: auto; line-height: 1; padding: $interval_2 + px $interval_4 + px; font-size: 1.6rem; font-weight: 400;}
          }
        }
      }

    }

  }

  &.type_1 {
    .header_wrap {

      .gnb_wrap {width: auto; float: right;}
      .lnb_wrap {left: auto; right: 0;}
    }
  }
  &.type_2 {
    .header_wrap {

      .gnb_wrap {width: auto; float: left; margin-left: ($interval_2 * 10) + px;}
      .lnb_wrap {left: auto; left: 0; right: auto;}
    }
  }

  .unb_wrap {display: inline-block; width: auto; height: auto; position: absolute; right: $interval_4 + px; top: 50%; transform:translate(0,-50%);

    ul {display: flex; justify-content: flex-start;
      li {display: inline-block; width: auto; height: auto; margin-left: $interval_3 + px;
        &:first-child {margin-left: 0;}
        a {display: inline-block; width: auto; height: auto; line-height: 20px; font-size: 1.2rem; font-weight: 400;}
      }
    }
  }


}

// 모바일
.mobile_menu_wrap {display: block; width: 100%; height: calc(100vh - 100px); position: fixed; left: 0; top: 100px; background-color: #fff; z-index: 1000;

  .user_menu_list {display: block; width: 100%; height: auto;
    > ul {display: flex; width: 100%; height: auto; background-color: $main_color; justify-content: flex-start; flex-direction: row; flex-wrap: nowrap;
      > li {flex: 1; display: flex; width: 100%; height: auto; justify-content: flex-start; align-items: center; text-align: center;
        &:not(:first-child){border-left: 1px solid $border_color;}
        > a {flex: 1; display: flex; justify-content: center; align-items: center; width: 100%; height: 40px; text-align: center; padding: 0 20px; font-size: 14px; font-weight: 500; color: #fff;}
      }
    }
  }

  .menu_list {display: flex; justify-content: flex-start; flex-direction: column; width: 100%; height: auto; position: relative;
    &::before {content: ''; display: block; width: 160px; height: 100vh; background-color: $background_color; position: absolute; left: 0; top: 0; z-index: -1;}
    > li {flex: 0 1 auto; display: block; width: 160px; background-color: $sub_color; border-bottom: 1px solid $border_color;
      &:first-child {border-top: 1px solid $border_color;}

      > a, span {display: block; width: 100%; height: 50px; line-height: 50px; padding: 0 20px; font-size: 16px; font-weight: 500; text-align: center; cursor: pointer; color: #fff;
        &.current {background-color: $main_color;}
      }
      .depth_wrap {flex: 1 1 auto; display: block; position: absolute; left: 160px; top: 0; width: 100%; height: auto; background-color: $background_color;
        > li {flex: 1 1 auto; display: block; width: 100%; height: auto; border-bottom: 1px solid $border_color;
          &:first-child {border-top: 1px solid $border_color;}
          > a {display: block; width: 100%; height: 50px; line-height: 50px; padding: 0 20px; font-size: 14px; font-weight: 500; color: $font_color_1;}
        }
      }
    }
  }

  &.test {position: relative; left: auto; top: auto; z-index: 0; height: auto;
    .menu_list {overflow: hidden;}
  }
}

// 헤더 관련 끝

// 드롭다운 관련 시작

.dropdown_wrap {display: inline-block; width: auto; height: auto; position: relative;
  .dropdown_btn {display: block; width: 100%; height: auto; min-height: 40px; line-height: 40px; cursor: pointer; padding: 0 40px 0 10px; margin: 0; text-align: left; border: 1px solid $border_color; color: #fff; background-color: $sub_color;
    &.color {background-color: $main_color;}
    @include bg_icon(rgba(255, 255, 255, 0.5), 'arrow_b', calc(100% - 8px));
  }
  .dropdown_list {display: block; width: auto; min-width: 100%; height: 0; min-height: 0; max-height: calc(100vh / 3); overflow: hidden; margin: 0; border: 0; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2); background-color: #fff; position: absolute; left: 0; top: 100%; z-index: 1000; transition: height 0.35s ease;
    &.left {left: 0; right: auto;}
    &.right {left: auto; right: 0;}
    &.on {
      +.dropdown_btn {background-color: $main_color;}
    }

    li {display: block; width: 100%; height: auto; margin: 0; padding: 0;
      button, a {display: inline-block; width: 100%; height: auto; min-height: 24px; line-height: 24px; padding: 4px 10px; margin: 0;
        &:hover {background-color: $sub_color; color: #fff;}
      }

      &.line {display: block; width: 100%; height: 4px; line-height: 1; min-height: 0; position: relative; background-color: transparent; padding: 4px 0;
        &:after {content: ''; display: block; width: 100%; height: 1px; background-color: $border_color; border: none; margin: 0; padding: 0; position: absolute; left: 0; top: 50%; transform: translate(0,-50%);}
      }
      &.group {display: block; width: 100%; height: auto; background-color: transparent; padding: 4px 10px; margin: 0; font-size: 0.8em; color: $font_color_3;
        > span {display: inline-block; width: auto; height: auto; position: relative;
          &:after {content: ''; display: block; width: 100%; height: 1px; background-color: $border_color; border: none; margin: 0; padding: 0; position: absolute; right: -4px; top: 50%; transform: translate(100%,-50%);}
        }
      }

    }
    &.color {
      li {
        button, a {
          &:hover {background-color: $main_color;}
        }
      }
    }
  }
  .dropdown_list_data_wrap {display: block; overflow: hidden; position: absolute; display: inline-block; border: 0; width: 1px; height: 1px; clip: rect(1px 1px 1px 1px); clip: rect(1px, 1px, 1px, 1px); clip-path: inset(50%); z-index: -1;
  }

  @include screen_width($md){
    width: 100%;
    .dropdown_btn {width: inherit;}
    .dropdown_list {width: inherit;}
  }
}

// 드롭다운 관련 시작

.accordion_wrap {display: inline-block; width: 100%; height: auto; border: 1px solid $border_color;

  &:first-child {border-bottom: 0;}
  &:last-child {border-top: 0;}

  .accordion_btn {display: block; width: 100%; height: auto; min-height: 40px; line-height: 40px; padding: 0 10px; margin: 0; text-align: left; background-color: $main_color; color: #fff;
    @include bg_icon(rgba(255, 255, 255, 0.9), 'arrow_b', calc(100% - 8px));

    &.on {
      @include bg_icon(rgba(255, 255, 255, 0.9), 'arrow_t', calc(100% - 8px));
    }
  }
  .accordion_cnt_wrap {display: block; width: 100%; height: 0; max-height: 24vh; overflow: hidden; margin: 0; padding: 0; border: 0; transition: all 0.5s ease;

    &.on {height: 1000px; overflow-y: auto; }

    .accordion_cnt {display: block; width: 100%; height: 100%; margin: 0; padding: $interval_4 + px; border: 1px solid $border_color; }
  }

}

// 드롭다운 관련 끝

// 토스트(메시지 창) Toast 관련 시작 

.toast_msg_box {display: block; width: auto; min-width: 200px; max-width: 30%; height: auto; margin: 0; padding: $interval_4 + px $interval_4 + px $interval_4 + px ($interval_4 * 4 + 20) + px; border-left: $interval_2 + px solid $color_msg; background-color: #fff; position: relative; box-shadow: 0 5px 10px 5px rgba(0, 0, 0, 0.1); transition: all 0.3s ease;

  @include screen_width(1000px){
    max-width: 40%;
  };
  @include screen_width(800px){
    max-width: 60%;
  };
  @include screen_width(400px){
    max-width: 80%;
  };


  &:before {content: 'Message'; display: block; width: 100%; height: auto; line-height: 1; margin: 0; padding: 0; color: $font_color_1; font-size: 1.6rem; font-weight: bold; padding-bottom: $interval_2 + px; border-bottom: 1px solid #fff;}
  &:after {content: ''; display: block; width: 40px; height: 40px; margin: 0; padding: 0; background-color: $color_msg; border-radius: 50%; position: absolute; left: $interval_4 + px; top: 50%; transform: translate(0, -50%);
    @include bg_icon(rgba(255, 255, 255, 0.9), 'mail_f');
  }

  &.success {border-left-color: $color_success;
    &:before {content: 'Success';}
    &:after {background-color: $color_success;
      @include bg_icon(rgba(255, 255, 255, 0.9), 'check_bold');
    }
  }
  &.error {border-left-color: $color_error;
    &:before {content: 'Error';}
    &:after {background-color: $color_error;
      @include bg_icon(rgba(255, 255, 255, 0.9), 'fail_bold');
    }
  }
  &.info {border-left-color: $color_info;
    &:before {content: 'Info';}
    &:after {background-color: $color_info;
      @include bg_icon(rgba(255, 255, 255, 0.9), 'mark_question');
    }
  }
  &.warning{border-left-color: $color_warning;
    &:before {content: 'Warning';}
    &:after {background-color: $color_warning;
      @include bg_icon(rgba(255, 255, 255, 0.9), 'mark_exclamation');
    }
  }

  .toast_msg_box_close {display: block; width: 20px; height: 20px; line-height: 20px; margin: 0; padding: 0; background-color: transparent; position: absolute; top: $interval_4 + px; right: $interval_4 + px;
    @include bg_icon(rgba(33, 33, 33, 0.9), 'fail');
  }
  .toast_msg {display: block; width: 100%; height: auto; margin: 0; padding: 0; color: $font_color_2; font-size: 1.6rem; font-weight: 400; white-space: normal; word-wrap: break-word; word-break: break-all;}
}

// 토스트(메시지 창) Toast 관련 끝 

//
.bg_box {display: block; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.3); position: absolute; left: 0; top: 0; z-index: 99999;}
.lock_bg {display: block; width: 100vw; height: 100vh; background: transparent; position: fixed; left: 0; top: 0; z-index: 99999;}

// 로딩 스피너(loading spinner) 관련 시작 
.loading_spinner {position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); display: inline-block; width: auto; height: auto; z-index: 99990;
  &:before, &:after {content: ''; display: block; width: auto; height: auto; position: absolute; background-color: transparent;}
  &.test {position: relative; left: auto; top: auto; transform: translate(0,0);}

  &.type_1 {width: 20vw; height: 20vw; min-width: 40px; min-height: 40px; max-width: 60px; max-height: 60px;
    &:before, &:after {width: inherit; height: inherit; min-width: inherit; min-height: inherit; max-width: inherit; max-height: inherit; border-radius: 50%; border: 10px solid; left: 50%; top: 50%; transform: translate(-50%, -50%);}
    &:before {border-color: rgba(255, 255, 255, 0.5);}
    &:after {border-color: $main_color; border-bottom-color: transparent; border-left-color: transparent; border-right-color: transparent;
      @include prefix(animation-name, spinner_rotation);
      @include prefix(animation-duration, 1s);
      @include prefix(animation-delay, 0s);
      @include prefix(animation-direction, normal);
      @include prefix(animation-timing-function, linear);
      @include prefix(animation-iteration-count, infinite);

      @include keyframes(spinner_rotation){
        0% {
          transform: translate(-50%, -50%) rotate(0);
        }
        100% {
          transform: translate(-50%, -50%) rotate(360deg);
        }
      }
    }
  }

  &.type_2 {width: 10vw; height: 10vw; min-width: 10px; min-height: 10px; max-width: 20px; max-height: 20px; border-radius: 50%; background-color: $main_color;

    @include prefix(animation-name, spinner_background_color);
    @include prefix(animation-duration, 6s);
    @include prefix(animation-delay, 1s);
    @include prefix(animation-direction, alternate);
    @include prefix(animation-timing-function, linear);
    @include prefix(animation-iteration-count, infinite);

    &:before, &:after {width: inherit; height: inherit; min-width: inherit; min-height: inherit; max-width: inherit; max-height: inherit; border-radius: 50%; background-color: inherit;

      @include prefix(animation-name, spinner_background_color);
      @include prefix(animation-duration, 6s);
      @include prefix(animation-direction, alternate);
      @include prefix(animation-timing-function, linear);
      @include prefix(animation-iteration-count, infinite);
    }
    &:before {left: -140%;
      @include prefix(animation-delay, 0s);
    }
    &:after {right: -140%;
      @include prefix(animation-delay, 2s);
    }

    @include keyframes(spinner_background_color){
      0% {
        background-color: $main_color;
      }
      50% {
        background-color: transparent;
      }
      100% {
        background-color: $main_color;
      }
    }
  }
  

  &.type_3 {width: 20vw; height: 20vw; min-width: 40px; min-height: 40px; max-width: 60px; max-height: 60px;
    &:before, &:after {width: inherit; height: inherit; min-width: inherit; min-height: inherit; max-width: inherit; max-height: inherit; border-radius: 50%; border: 10px solid; left: 50%; top: 50%; transform: translate(-50%, -50%);}
    &:before {border-color: rgba(255, 255, 255, 0.5);}
    &:after {border-color: $main_color; border-bottom-color: $main_color; border-left-color: $main_color; border-right-color: transparent;
      @include prefix(animation-name, spinner_rotation);
      @include prefix(animation-duration, 1s);
      @include prefix(animation-delay, 0s);
      @include prefix(animation-direction, normal);
      @include prefix(animation-timing-function, linear);
      @include prefix(animation-iteration-count, infinite);
    }
  }

  &.type_4 {width: 20vw; height: 20vw; min-width: 40px; min-height: 40px; max-width: 60px; max-height: 60px;
    &:before, &:after {width: inherit; height: inherit; min-width: inherit; min-height: inherit; max-width: inherit; max-height: inherit; border-radius: 50%; border: 10px solid; left: 50%; top: 50%; transform: translate(-50%, -50%);}
    &:before {border-color: rgba(255, 255, 255, 0.5);}
    &:after {border-color: $main_color; border-bottom-color: $main_color; border-left-color: transparent; border-right-color: transparent;
      @include prefix(animation-name, spinner_rotation);
      @include prefix(animation-duration, 1s);
      @include prefix(animation-delay, 0s);
      @include prefix(animation-direction, normal);
      @include prefix(animation-timing-function, linear);
      @include prefix(animation-iteration-count, infinite);

    }
  }

  &.type_5 {width: 20vw; height: 20vw; min-width: 10px; max-width: 12px; max-height: 80px; background-color: $main_color; margin: 0;
    @include prefix(animation-name, spinner_volume);
    @include prefix(animation-duration, 0.8s);
    @include prefix(animation-delay, 0.4s);
    @include prefix(animation-direction, alternate);
    @include prefix(animation-timing-function, ease-in-out);
    @include prefix(animation-iteration-count, infinite);

    &:before, &:after {width: 100%; height: 100%; border-radius: 0; border: 0; background-color: $main_color; position: absolute;}
    &:before {left: -24px; top: 50%; transform: translate(0, -50%);
      @include prefix(animation-name, spinner_volume);
      @include prefix(animation-duration, 0.8s);
      @include prefix(animation-delay, 0s);
      @include prefix(animation-direction, alternate);
      @include prefix(animation-timing-function, ease-in-out);
      @include prefix(animation-iteration-count, infinite);
    }
    &:after {right: -24px; top: 50%; transform: translate(0, -50%);
      @include prefix(animation-name, spinner_volume);
      @include prefix(animation-duration, 0.8s);
      @include prefix(animation-delay, 0.8s);
      @include prefix(animation-direction, alternate);
      @include prefix(animation-timing-function, ease-in-out);
      @include prefix(animation-iteration-count, infinite);
    }
    
    @include keyframes(spinner_volume){
      0% {
        height: 12px;
      }
      100% {
        height: 60px;
      }
    }
  }

  &.type_6 {width: 20vw; height: 20vw; min-width: 10px; max-width: 12px; max-height: 80px; background-color: $main_color; margin: 0;
    @include prefix(animation-name, spinner_volume_2);
    @include prefix(animation-duration, 0.5s);
    @include prefix(animation-delay, 0.1s);
    @include prefix(animation-direction, alternate);
    @include prefix(animation-timing-function, ease);
    @include prefix(animation-iteration-count, infinite);

    &:before, &:after {width: 100%; height: 100%; border-radius: 0; border: 0; background-color: $main_color; position: absolute;
      @include prefix(animation-duration, 0.5s);
      @include prefix(animation-delay, 0s);
    }
    &:before {left: -24px; top: 50%; transform: translate(0, -50%);
      @include prefix(animation-duration, 0.5s);
      @include prefix(animation-delay, 0s);
    }
    &:after {right: -24px; top: 50%; transform: translate(0, -50%);
      @include prefix(animation-duration, 0.5s);
      @include prefix(animation-delay, 0.2s);
    }
    
    @include keyframes(spinner_volume_2){
      0% {
        height: 40px;
      }
      100% {
        height: 80px;
      }
    }
  }

  &.type_7 {width: 20vw; height: 20vw; min-width: 40px; min-height: 40px; max-width: 80px; max-height: 80px; border-radius: 50%; border: 3px solid; border-bottom-color: $main_color; border-right-color: transparent; background-color: transparent;
    @include prefix(animation-name, spinner_rotation);
    @include prefix(animation-duration, 2s);
    @include prefix(animation-delay, 0s);
    @include prefix(animation-direction, normal);
    @include prefix(animation-timing-function, linear);
    @include prefix(animation-iteration-count, infinite);

    &:before, &:after {border-radius: 50%; left: 50%; top: 50%; transform: translate(-50%, -50%); background-color: transparent;
      @include prefix(animation-name, spinner_rotation);
      @include prefix(animation-direction, normal);
      @include prefix(animation-timing-function, linear);
      @include prefix(animation-iteration-count, infinite);
    }
    &:before {width: calc(100% - 20px); height: calc(100% - 20px); border: 4px solid; border-bottom-color: $main_color; border-left-color: $main_color; border-right-color: transparent; border-top-color: transparent;
      @include prefix(animation-duration, 6s);
      @include prefix(animation-delay, 0.4s);
    }
    &:after {width: calc(100% + 20px); height: calc(100% + 20px); border: 2px solid; border-bottom-color: $main_color; border-left-color: $main_color; border-right-color: transparent;
      @include prefix(animation-duration, 4s);
      @include prefix(animation-delay, 0.2s);
    }

  }

  &.type_8 {width: 20vw; height: 20vw; min-width: 40px; min-height: 40px; max-width: 80px; max-height: 80px; border-radius: 50%; border: 3px solid; border-bottom-color: $main_color; border-left-color: transparent; border-right-color: transparent; border-top-color: transparent; background-color: transparent;
    @include prefix(animation-name, spinner_rotation);
    @include prefix(animation-duration, 2s);
    @include prefix(animation-delay, 0s);
    @include prefix(animation-direction, normal);
    @include prefix(animation-timing-function, linear);
    @include prefix(animation-iteration-count, infinite);

    &:before, &:after {border-radius: 50%; left: 50%; top: 50%; transform: translate(-50%, -50%); background-color: transparent;
      @include prefix(animation-name, spinner_rotation);
      @include prefix(animation-direction, normal);
      @include prefix(animation-timing-function, linear);
      @include prefix(animation-iteration-count, infinite);
    }
    &:before {width: calc(100% - 20px); height: calc(100% - 20px); border: 4px solid; border-bottom-color: $main_color; border-left-color: transparent; border-right-color: transparent; border-top-color: transparent;

      @include prefix(animation-duration, 3s);
      @include prefix(animation-delay, 0.4s);
    }
    &:after {width: calc(100% + 20px); height: calc(100% + 20px); border: 2px solid; border-bottom-color: $main_color; border-left-color: transparent; border-right-color: transparent; border-top-color: transparent;

      @include prefix(animation-duration, 4s);
      @include prefix(animation-delay, 0.2s);
    }

  }

  &.type_9 {width: 10vw; height: 10vw; min-width: 10px; min-height: 10px; max-width: 20px; max-height: 20px; border-radius: 50%; background-color: $main_color;

    @include prefix(animation-name, spinner_jump);
    @include prefix(animation-duration, 0.5s);
    @include prefix(animation-delay, 0.4s);
    @include prefix(animation-direction, alternate);
    @include prefix(animation-timing-function, linear);
    @include prefix(animation-iteration-count, infinite);

    &:before, &:after {width: inherit; height: inherit; min-width: inherit; min-height: inherit; max-width: inherit; max-height: inherit; border-radius: 50%; background-color: inherit; top: 50%;
      @include prefix(animation-name, spinner_jump_2);      
      @include prefix(animation-direction, alternate);
      @include prefix(animation-timing-function, linear);
      @include prefix(animation-iteration-count, infinite);
    }
    &:before {left: -24px;
      @include prefix(animation-delay, 0.2s);
      @include prefix(animation-duration, 0.5s);
    }
    &:after {right: -24px;
      @include prefix(animation-delay, 0.6s);
      @include prefix(animation-duration, 0.5s);
    }

    @include keyframes(spinner_jump){
      0% {
        transform: translate3d(0,calc(-50% - 10px),0);
      }
      50% {
        transform: translate3d(0,-50%,0);
      }
      100% {
        transform: translate3d(0,calc(-50% + 10px),0);
      }
    }
    @include keyframes(spinner_jump_2){
      0% {
        transform: translate3d(0,calc(-50% - 5px),0);
      }
      50% {
        transform: translate3d(0,-50%,0);
      }
      100% {
        transform: translate3d(0,calc(-50% + 5px),0);
      }
    }
  }

  &.type_10 {width: 20vw; height: 20vw; min-width: 40px; min-height: 4px; max-width: 120px; max-height: 8px; background-color: rgba(255, 255, 255, 0.5); overflow: hidden;

    &:before {width: 0; height: 100%; position: absolute; left: 0; top: 0; background-color: $main_color;
      @include prefix(animation-name, spinner_progress);
      @include prefix(animation-duration, 6s);
      @include prefix(animation-delay, 0.4s);
      @include prefix(animation-direction, normal);
      @include prefix(animation-timing-function, ease);
      @include prefix(animation-iteration-count, infinite);
      @include prefix(animation-fill-mode, backwards);
    }

    @include keyframes(spinner_progress){
      0% {
        width: 0; transform: translate(0,0);
      }
      50% {
        width: 100%; transform: translate(100%,0);
      }
      100% {
        width: 0; transform: translate(0,0);
      }
    }

  }

  &.type_11 {width: 20vw; height: 20vw; min-width: 40px; min-height: 40px; max-width: 60px; max-height: 60px; border-radius: 50%; background-color: $main_color;
    @include prefix(animation-name, spinner_rotation_2);
    @include prefix(animation-duration, 3s);
    @include prefix(animation-delay, 0s);
    @include prefix(animation-direction, normal);
    @include prefix(animation-timing-function, ease);
    @include prefix(animation-iteration-count, infinite);

    @include keyframes(spinner_rotation_2){
      0% {
        transform: rotateY(0);
      }
      50% {
        transform: rotateY(720deg);
      }
      100% {
        transform: rotateY(1440deg);
      }
    }

  }
  

}

// 로딩 스피너(loading spinner) 관련 끝 



// 드래그 앤 드롭 리스트(drag and drop list) 관련 시작 

.drag_drop_list_wrap {display: flex; width: 100%; max-width: 400px; height: auto; flex-direction: column; justify-content: center; gap: 4px; border: 1px solid $border_color; padding: 10px; transition: all 0.35s ease;
  .none {display: flex; width: 100%; height: 100%; justify-content: center; align-items: center;}
  .drag_drop_list_box {display: block; width: 100%; height: auto; margin: 0; padding: 0; transition: all 0.35s ease;
    .drag_drop_list_info {display: flex; width: 100%; height: 40px; flex-direction: row; align-items: center; justify-content: flex-start; background-color: #eee; cursor: pointer;
      .drag_drop_list_icon {display: block; width: 40px; height: inherit; background-color: #aaa; cursor: pointer;
        @include bg_icon(rgb(255, 255, 255), 'buger_menu', 50%);
      }
      .drag_drop_list_name {flex: 1 1 auto; display: block; width: auto; padding: 4px 10px;}
      .btn {display: block; width: auto; height: inherit; padding: 4px 10px; font-size: 14px; font-weight: bold; margin: 0 0 0 auto;}
    }
    &:hover {
      .drag_drop_list_icon {@include bg_icon(rgb(0, 0, 0), 'buger_menu', 50%);}
      .drag_drop_list_info {background-color: $sub_color; color: #fff;}
    }
    &.active,
    &.dragging {
      .drag_drop_list_info {background-color: $sub_color; color: #fff;}
    }
  }
}
// 드래그 앤 드롭 리스트(drag and drop list) 관련 끝 





// 반응형 기준 설정 (max-width로 적용)
// $xxs : 300px;
// $xs : 500px;
// $sm : 600px;
// $md : 800px;
// $lg : 1000px;
// $xl : 1200px;
// $xxl : 1400px;

@import "./scss/datepicker.scss";
@import "./scss/background.scss";
@import "./scss/border.scss";
@import "./scss/display.scss";
@import "./scss/font.scss";
@import "./scss/interval.scss";
@import "./scss/position.scss";
@import "./scss/width-height.scss";
@import "./scss/transform.scss";
@import "./scss/transition.scss";
@import "./scss/interactive.scss";
@import "./scss/responsive.scss";
@import "./scss/animation.scss";
@import "./scss/progress.scss";






// 선택자에 따른 적용 (first, last) 시작 ----------------

// 선택자에 따른 적용 (first, last) 끝 ----------------
